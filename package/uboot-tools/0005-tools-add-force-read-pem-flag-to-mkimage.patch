From f525abc50be4bc5b9e846b0df698c67c1710ab16 Mon Sep 17 00:00:00 2001
From: Charles Hardin <charles.hardin@chargepoint.com>
Date: Thu, 19 May 2022 11:27:56 -0700
Subject: [PATCH 1/1] tools: add force read pem flag to mkimage

In some cases an openssl engine implemented by an HSM vendor will
use keys and certs stored directly on the filesystem.  For example
AWS CloudHSM needs a fake pem file which contains a reference to
the acutal private key stored in the HSM.

This change adds a command line argument (-m) that forces the
logic that eads pem files to be used even if an openssl engine
is specified when signing a FIT image.

    $ mkimage -m -k /path/to/keys -N cloudhsm -F /path/to//file.itb

Signed-off-by: Michael Robak <michael.robak@chargepoint.com>
Signed-off-by: Charles Hardin <charles.hardin@chargepoint.com>
---
 common/image-fit-sig.c | 23 ++++++++++++++---------
 common/image-fit.c     |  2 +-
 include/image.h        |  8 ++++++--
 lib/rsa/rsa-sign.c     | 14 +++++++++-----
 tools/fit_image.c      |  1 +
 tools/image-host.c     | 29 +++++++++++++++++------------
 tools/imagetool.h      |  1 +
 tools/mkimage.c        |  8 ++++++--
 8 files changed, 55 insertions(+), 31 deletions(-)

diff --git a/common/image-fit-sig.c b/common/image-fit-sig.c
index 55ddf1879e..fc51173336 100644
--- a/common/image-fit-sig.c
+++ b/common/image-fit-sig.c
@@ -67,7 +67,8 @@ struct image_region *fit_region_make_list(const void *fit,
 
 static int fit_image_setup_verify(struct image_sign_info *info,
 				  const void *fit, int noffset,
-				  int required_keynode, char **err_msgp)
+				  int required_keynode,
+				  bool force_pem, char **err_msgp)
 {
 	char *algo_name;
 	const char *padding_name;
@@ -96,6 +97,7 @@ static int fit_image_setup_verify(struct image_sign_info *info,
 	info->padding = image_get_padding_algo(padding_name);
 	info->fdt_blob = gd_fdt_blob();
 	info->required_keynode = required_keynode;
+	info->force_pem = force_pem;
 	printf("%s:%s", algo_name, info->keyname);
 
 	if (!info->checksum || !info->crypto || !info->padding) {
@@ -107,7 +109,8 @@ static int fit_image_setup_verify(struct image_sign_info *info,
 }
 
 int fit_image_check_sig(const void *fit, int noffset, const void *data,
-			size_t size, int required_keynode, char **err_msgp)
+			size_t size, int required_keynode,
+			bool force_pem, char **err_msgp)
 {
 	struct image_sign_info info;
 	struct image_region region;
@@ -116,7 +119,7 @@ int fit_image_check_sig(const void *fit, int noffset, const void *data,
 
 	*err_msgp = NULL;
 	if (fit_image_setup_verify(&info, fit, noffset, required_keynode,
-				   err_msgp))
+				   force_pem, err_msgp))
 		return -1;
 
 	if (fit_image_hash_get_value(fit, noffset, &fit_value,
@@ -160,7 +163,7 @@ static int fit_image_verify_sig(const void *fit, int image_noffset,
 		if (!strncmp(name, FIT_SIG_NODENAME,
 			     strlen(FIT_SIG_NODENAME))) {
 			ret = fit_image_check_sig(fit, noffset, data,
-						  size, -1, &err_msg);
+						  size, -1, false, &err_msg);
 			if (ret) {
 				puts("- ");
 			} else {
@@ -243,7 +246,7 @@ int fit_image_verify_required_sigs(const void *fit, int image_noffset,
  */
 static int fit_config_check_sig(const void *fit, int noffset,
 				int required_keynode, int conf_noffset,
-				char **err_msgp)
+				bool force_pem, char **err_msgp)
 {
 	char * const exc_prop[] = {"data", "data-size", "data-position"};
 	const char *prop, *end, *name;
@@ -264,7 +267,7 @@ static int fit_config_check_sig(const void *fit, int noffset,
 	      fit_get_name(gd_fdt_blob(), required_keynode, NULL));
 	*err_msgp = NULL;
 	if (fit_image_setup_verify(&info, fit, noffset, required_keynode,
-				   err_msgp))
+				   force_pem, err_msgp))
 		return -1;
 
 	if (fit_image_hash_get_value(fit, noffset, &fit_value,
@@ -366,7 +369,8 @@ static int fit_config_check_sig(const void *fit, int noffset,
 }
 
 static int fit_config_verify_sig(const void *fit, int conf_noffset,
-				 const void *sig_blob, int sig_offset)
+				 const void *sig_blob, int sig_offset,
+				 bool force_pem)
 {
 	int noffset;
 	char *err_msg = "No 'signature' subnode found";
@@ -380,7 +384,8 @@ static int fit_config_verify_sig(const void *fit, int conf_noffset,
 		if (!strncmp(name, FIT_SIG_NODENAME,
 			     strlen(FIT_SIG_NODENAME))) {
 			ret = fit_config_check_sig(fit, noffset, sig_offset,
-						   conf_noffset, &err_msg);
+						   conf_noffset, force_pem,
+						   &err_msg);
 			if (ret) {
 				puts("- ");
 			} else {
@@ -454,7 +459,7 @@ static int fit_config_verify_required_sigs(const void *fit, int conf_noffset,
 		reqd_sigs++;
 
 		ret = fit_config_verify_sig(fit, conf_noffset, sig_blob,
-					    noffset);
+					    noffset, false);
 		if (ret) {
 			if (reqd_policy_all) {
 				printf("Failed to verify required signature '%s'\n",
diff --git a/common/image-fit.c b/common/image-fit.c
index e614643fe3..ecdb9b4245 100644
--- a/common/image-fit.c
+++ b/common/image-fit.c
@@ -1327,7 +1327,7 @@ int fit_image_verify_with_data(const void *fit, int image_noffset,
 				!strncmp(name, FIT_SIG_NODENAME,
 					strlen(FIT_SIG_NODENAME))) {
 			ret = fit_image_check_sig(fit, noffset, data,
-							size, -1, &err_msg);
+							size, -1, false, &err_msg);
 
 			/*
 			 * Show an indication on failure, but do not return
diff --git a/include/image.h b/include/image.h
index 459685d4d4..5d3edfa31d 100644
--- a/include/image.h
+++ b/include/image.h
@@ -1124,6 +1124,7 @@ int fit_cipher_data(const char *keydir, void *keydest, void *fit,
  * @comment:	Comment to add to signature nodes
  * @require_keys: Mark all keys as 'required'
  * @engine_id:	Engine to use for signing
+ * @force_pem: Force read PEM file if openssl engine is used
  * @cmdname:	Command name used when reporting errors
  *
  * Adds hash values for all component images in the FIT blob.
@@ -1139,7 +1140,7 @@ int fit_cipher_data(const char *keydir, void *keydest, void *fit,
 int fit_add_verification_data(const char *keydir, const char *keyfile,
 			      void *keydest, void *fit, const char *comment,
 			      int require_keys, const char *engine_id,
-			      const char *cmdname);
+			      bool force_pem, const char *cmdname);
 
 int fit_image_verify_with_data(const void *fit, int image_noffset,
 			       const void *data, size_t size);
@@ -1278,6 +1279,7 @@ struct image_sign_info {
 	int required_keynode;		/* Node offset of key to use: -1=any */
 	const char *require_keys;	/* Value for 'required' property */
 	const char *engine_id;		/* Engine to use for signing */
+	bool force_pem;			/* Force read PEM file */
 	/*
 	 * Note: the following two fields are always valid even w/o
 	 * RSA_VERIFY_WITH_PKEY in order to make sure this structure is
@@ -1424,12 +1426,14 @@ int fit_image_verify_required_sigs(const void *fit, int image_noffset,
  *			if any. If this is given, then the image wil not
  *			pass verification unless that key is used. If this is
  *			-1 then any signature will do.
+ * @force_pem:		Force read PEM file if openssl engine is used
  * @err_msgp:		In the event of an error, this will be pointed to a
  *			help error string to display to the user.
  * @return 0 if all verified ok, <0 on error
  */
 int fit_image_check_sig(const void *fit, int noffset, const void *data,
-		size_t size, int required_keynode, char **err_msgp);
+		size_t size, int required_keynode, bool force_pem,
+		char **err_msgp);
 
 int fit_image_decrypt_data(const void *fit,
 			   int image_noffset, int cipher_noffset,
diff --git a/lib/rsa/rsa-sign.c b/lib/rsa/rsa-sign.c
index 5a1583b8f7..5d70e1ec46 100644
--- a/lib/rsa/rsa-sign.c
+++ b/lib/rsa/rsa-sign.c
@@ -170,14 +170,16 @@ static int rsa_engine_get_pub_key(const char *keydir, const char *name,
  *
  * @keydir:	Directory containing the key (PEM file) or key prefix (engine)
  * @name	Name of key file (will have a .crt extension)
+ * @force_pem	Force reading keys from file even if Engine is used
  * @engine	Engine to use
  * @evpp	Returns EVP_PKEY object, or NULL on failure
  * @return 0 if ok, -ve on error (in which case *evpp will be set to NULL)
  */
 static int rsa_get_pub_key(const char *keydir, const char *name,
+			   bool force_pem,
 			   ENGINE *engine, EVP_PKEY **evpp)
 {
-	if (engine)
+	if (engine && !force_pem)
 		return rsa_engine_get_pub_key(keydir, name, engine, evpp);
 	return rsa_pem_get_pub_key(keydir, name, evpp);
 }
@@ -297,14 +299,16 @@ static int rsa_engine_get_priv_key(const char *keydir, const char *name,
  *
  * @keydir:	Directory containing the key (PEM file) or key prefix (engine)
  * @name	Name of key
+ * @force_pem	Force reading keys from file even if Engine is used
  * @engine	Engine to use for signing
  * @evpp	Returns EVP_PKEY object, or NULL on failure
  * @return 0 if ok, -ve on error (in which case *evpp will be set to NULL)
  */
 static int rsa_get_priv_key(const char *keydir, const char *name,
-			    const char *keyfile, ENGINE *engine, EVP_PKEY **evpp)
+			    const char *keyfile,
+			    bool force_pem, ENGINE *engine, EVP_PKEY **evpp)
 {
-	if (engine)
+	if (engine && !force_pem)
 		return rsa_engine_get_priv_key(keydir, name, keyfile, engine,
 					       evpp);
 	return rsa_pem_get_priv_key(keydir, name, keyfile, evpp);
@@ -506,7 +510,7 @@ int rsa_sign(struct image_sign_info *info,
 	}
 
 	ret = rsa_get_priv_key(info->keydir, info->keyname, info->keyfile,
-			       e, &pkey);
+			       info->force_pem, e, &pkey);
 	if (ret)
 		goto err_priv;
 	ret = rsa_sign_with_key(pkey, info->padding, info->checksum, region,
@@ -672,7 +676,7 @@ int rsa_add_verify_data(struct image_sign_info *info, void *keydest)
 		if (ret)
 			return ret;
 	}
-	ret = rsa_get_pub_key(info->keydir, info->keyname, e, &pkey);
+	ret = rsa_get_pub_key(info->keydir, info->keyname, info->force_pem, e, &pkey);
 	if (ret)
 		goto err_get_pub_key;
 #if OPENSSL_VERSION_NUMBER < 0x10100000L || \
diff --git a/tools/fit_image.c b/tools/fit_image.c
index ae30f80783..f7a61c5194 100644
--- a/tools/fit_image.c
+++ b/tools/fit_image.c
@@ -73,6 +73,7 @@ static int fit_add_file_data(struct image_tool_params *params, size_t size_inc,
 						params->comment,
 						params->require_keys,
 						params->engine_id,
+						params->force_pem,
 						params->cmdname);
 	}
 
diff --git a/tools/image-host.c b/tools/image-host.c
index 270d36fe45..a744385a21 100644
--- a/tools/image-host.c
+++ b/tools/image-host.c
@@ -155,7 +155,7 @@ static int fit_image_write_sig(void *fit, int noffset, uint8_t *value,
 static int fit_image_setup_sig(struct image_sign_info *info,
 		const char *keydir, const char *keyfile, void *fit,
 		const char *image_name, int noffset, const char *require_keys,
-		const char *engine_id)
+		const char *engine_id, bool force_pem)
 {
 	const char *node_name;
 	char *algo_name;
@@ -182,6 +182,7 @@ static int fit_image_setup_sig(struct image_sign_info *info,
 	info->padding = image_get_padding_algo(padding_name);
 	info->require_keys = require_keys;
 	info->engine_id = engine_id;
+	info->force_pem = force_pem;
 	if (!info->checksum || !info->crypto) {
 		printf("Unsupported signature algorithm (%s) for '%s' signature node in '%s' image node\n",
 		       algo_name, node_name, image_name);
@@ -213,7 +214,7 @@ static int fit_image_process_sig(const char *keydir, const char *keyfile,
 		void *keydest, void *fit, const char *image_name,
 		int noffset, const void *data, size_t size,
 		const char *comment, int require_keys, const char *engine_id,
-		const char *cmdname)
+		bool force_pem, const char *cmdname)
 {
 	struct image_sign_info info;
 	struct image_region region;
@@ -224,7 +225,7 @@ static int fit_image_process_sig(const char *keydir, const char *keyfile,
 
 	if (fit_image_setup_sig(&info, keydir, keyfile, fit, image_name,
 				noffset, require_keys ? "image" : NULL,
-				engine_id))
+				engine_id, force_pem))
 		return -1;
 
 	node_name = fit_get_name(fit, noffset, NULL);
@@ -604,7 +605,7 @@ int fit_image_cipher_data(const char *keydir, void *keydest,
 int fit_image_add_verification_data(const char *keydir, const char *keyfile,
 		void *keydest, void *fit, int image_noffset,
 		const char *comment, int require_keys, const char *engine_id,
-		const char *cmdname)
+		bool force_pem, const char *cmdname)
 {
 	const char *image_name;
 	const void *data;
@@ -641,7 +642,8 @@ int fit_image_add_verification_data(const char *keydir, const char *keyfile,
 				strlen(FIT_SIG_NODENAME))) {
 			ret = fit_image_process_sig(keydir, keyfile, keydest,
 				fit, image_name, noffset, data, size,
-				comment, require_keys, engine_id, cmdname);
+				comment, require_keys, engine_id,
+				force_pem, cmdname);
 		}
 		if (ret)
 			return ret;
@@ -925,7 +927,8 @@ static int fit_config_get_data(void *fit, int conf_noffset, int noffset,
 static int fit_config_process_sig(const char *keydir, const char *keyfile,
 		void *keydest,	void *fit, const char *conf_name,
 		int conf_noffset, int noffset, const char *comment,
-		int require_keys, const char *engine_id, const char *cmdname)
+		int require_keys, const char *engine_id,
+		bool force_pem, const char *cmdname)
 {
 	struct image_sign_info info;
 	const char *node_name;
@@ -943,7 +946,8 @@ static int fit_config_process_sig(const char *keydir, const char *keyfile,
 		return -1;
 
 	if (fit_image_setup_sig(&info, keydir, keyfile, fit, conf_name, noffset,
-				require_keys ? "conf" : NULL, engine_id))
+				require_keys ? "conf" : NULL, engine_id,
+				force_pem))
 		return -1;
 
 	ret = info.crypto->sign(&info, region, region_count, &value,
@@ -990,7 +994,7 @@ static int fit_config_process_sig(const char *keydir, const char *keyfile,
 static int fit_config_add_verification_data(const char *keydir,
 		const char *keyfile, void *keydest, void *fit, int conf_noffset,
 		const char *comment, int require_keys, const char *engine_id,
-		const char *cmdname)
+		bool force_pem, const char *cmdname)
 {
 	const char *conf_name;
 	int noffset;
@@ -1009,7 +1013,7 @@ static int fit_config_add_verification_data(const char *keydir,
 			     strlen(FIT_SIG_NODENAME))) {
 			ret = fit_config_process_sig(keydir, keyfile, keydest,
 				fit, conf_name, conf_noffset, noffset, comment,
-				require_keys, engine_id, cmdname);
+				require_keys, engine_id, force_pem, cmdname);
 		}
 		if (ret)
 			return ret;
@@ -1056,7 +1060,7 @@ int fit_cipher_data(const char *keydir, void *keydest, void *fit,
 int fit_add_verification_data(const char *keydir, const char *keyfile,
 			      void *keydest, void *fit, const char *comment,
 			      int require_keys, const char *engine_id,
-			      const char *cmdname)
+			      bool force_pem, const char *cmdname)
 {
 	int images_noffset, confs_noffset;
 	int noffset;
@@ -1080,7 +1084,7 @@ int fit_add_verification_data(const char *keydir, const char *keyfile,
 		 */
 		ret = fit_image_add_verification_data(keydir, keyfile, keydest,
 				fit, noffset, comment, require_keys, engine_id,
-				cmdname);
+				force_pem, cmdname);
 		if (ret)
 			return ret;
 	}
@@ -1104,7 +1108,8 @@ int fit_add_verification_data(const char *keydir, const char *keyfile,
 		ret = fit_config_add_verification_data(keydir, keyfile, keydest,
 						       fit, noffset, comment,
 						       require_keys,
-						       engine_id, cmdname);
+						       engine_id, force_pem,
+						       cmdname);
 		if (ret)
 			return ret;
 	}
diff --git a/tools/imagetool.h b/tools/imagetool.h
index e229a34ffc..f48e7b3be3 100644
--- a/tools/imagetool.h
+++ b/tools/imagetool.h
@@ -83,6 +83,7 @@ struct image_tool_params {
 	int bl_len;		/* Block length in byte for external data */
 	const char *engine_id;	/* Engine to use for signing */
 	bool reset_timestamp;	/* Reset the timestamp on an existing image */
+	bool force_pem;		/* Force read pem files Engine is used */
 };
 
 /*
diff --git a/tools/mkimage.c b/tools/mkimage.c
index cc7b242faf..4cd03ac749 100644
--- a/tools/mkimage.c
+++ b/tools/mkimage.c
@@ -113,7 +113,8 @@ static void usage(const char *msg)
 		"          -F => re-sign existing FIT image\n"
 		"          -p => place external data at a static position\n"
 		"          -r => mark keys used as 'required' in dtb\n"
-		"          -N => openssl engine to use for signing\n");
+		"          -N => openssl engine to use for signing\n"
+		"          -m => force read PEM file with openssl engine\n");
 #else
 	fprintf(stderr,
 		"Signing / verified boot not supported (CONFIG_FIT_SIGNATURE undefined)\n");
@@ -152,7 +153,7 @@ static void process_args(int argc, char **argv)
 	int opt;
 
 	while ((opt = getopt(argc, argv,
-		   "a:A:b:B:c:C:d:D:e:Ef:FG:k:i:K:ln:N:p:O:rR:qstT:vVx")) != -1) {
+		   "a:A:b:B:c:C:d:D:e:Ef:FG:k:i:K:lmn:N:p:O:rR:qstT:vVx")) != -1) {
 		switch (opt) {
 		case 'a':
 			params.addr = strtoull(optarg, &ptr, 16);
@@ -242,6 +243,9 @@ static void process_args(int argc, char **argv)
 		case 'l':
 			params.lflag = 1;
 			break;
+		case 'm':
+			params.force_pem = true;
+			break;
 		case 'n':
 			params.imagename = optarg;
 			break;
-- 
2.32.1 (Apple Git-133)

